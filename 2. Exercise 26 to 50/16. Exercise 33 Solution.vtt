WEBVTT

0
00:01.020 --> 00:04.100
Hi everyone and this is the solution to exercise

1
00:04.110 --> 00:10.080
33 where you were asked to tell what the output of this script would be.

2
00:10.260 --> 00:13.370
And I asked you to tell to say the output mentally

3
00:13.370 --> 00:16.670
so don't execute the code because that's quite easy to do.

4
00:16.800 --> 00:19.050
Such as what I'm doing here.

5
00:19.050 --> 00:27.960
So the output is 2, but I asked you to do it mentally to understand how Python works.

6
00:27.990 --> 00:31.040
So let me explain why you get 2 in here.

7
00:31.920 --> 00:40.480
Well Python executes a script from top to bottom so it goes to the first line. This is a comment.

8
00:40.510 --> 00:41.970
So just goes with the next line.

9
00:41.970 --> 00:43.620
This just goes to the next line.

10
00:43.830 --> 00:47.160
We have a variable here, so one is assigned to c.

11
00:47.220 --> 00:51.850
So the name c has a value of one now, so c

12
00:51.870 --> 00:58.610
think of it as a container and we have a blueprint, so which is a function I call it a blueprint.

13
00:59.040 --> 01:05.520
So you write an algorithm to perform something and inside this function what I'm doing here is I'm creating

14
01:06.300 --> 01:08.010
a local variable.

15
01:08.040 --> 01:09.760
So this is a local value.

16
01:09.800 --> 01:17.920
This is a global variable. Inside a function local variables cannot be accessed outside of the function.

17
01:18.090 --> 01:19.730
So this is a different variable.

18
01:19.740 --> 01:22.550
And this is different variable from this one in here.

19
01:23.030 --> 01:26.040
Local Variables have priority inside a function.

20
01:26.040 --> 01:30.940
So when you do then, when you do return c, what the function does

21
01:31.050 --> 01:39.750
it looks inside the function for a variable named and so Python because it gives priority to local variables

22
01:40.480 --> 01:45.000
this function will return the value of this local variable.

23
01:45.030 --> 01:53.760
So it will return 2, and then what we have here is we assign another value to variable c, to global variable

24
01:53.760 --> 01:55.210
c which was defined in here.

25
01:55.290 --> 02:01.620
So c now has a variable of three and Python is still executing the script.

26
02:01.740 --> 02:09.510
So it's in line 7 for now and then it goes to the last line where it prints out the function output

27
02:11.010 --> 02:12.620
which is 2.

28
02:12.720 --> 02:14.360
So that's why you get two.

29
02:14.500 --> 02:20.560
Because function takes the value of c, of local variable c and prints, and returns that value.

30
02:20.970 --> 02:21.920
That's the explanation.

31
02:21.930 --> 02:23.760
Feel free to ask questions if you like.

32
02:23.790 --> 02:24.380
See you later.