WEBVTT

0
00:01.440 --> 00:06.540
Hello again! This is a solution to exerrrrrrrrrrrrrrrrrcise 43.

1
00:06.000 --> 00:12.620
You are asked to create a script that generates a text file where all letters of English alphabet are

2
00:12.680 --> 00:15.180
listed two in each line.

3
00:15.360 --> 00:19.580
And so the text file would look like this AB, CD, EF

4
00:19.710 --> 00:29.520
and so one up to the last letters. I'm using the String module in here which is a built in module and that comes

5
00:29.520 --> 00:39.390
with Python. You don't need to install String and then I'm using Open method to create a file in

6
00:39.400 --> 00:40.340
write mode.

7
00:40.350 --> 00:43.710
Here, tis the name I'm giving to the file.

8
00:43.820 --> 00:46.990
Then again we use a for loop.

9
00:47.380 --> 00:52.740
We're iterating through a zip function which aggregates this sequence.

10
00:52.770 --> 01:02.760
So to say with this sequence which return,I have to open an interactive session here. Import

11
01:03.220 --> 01:04.490
string.

12
01:04.860 --> 01:15.680
Then let me copy this to show you what you get from this.

13
01:17.030 --> 01:23.000
So this accesses the entire string.

14
01:23.060 --> 01:32.840
So it accesses this string because you're saying give me that string for you zero to the

15
01:32.840 --> 01:35.930
last item, but with a step of two.

16
01:36.080 --> 01:44.150
So what that will do it will go to a. It will get a and then it will skip a b and then it gets c. It skips

17
01:44.360 --> 01:45.580
d it gets e.

18
01:45.620 --> 01:53.750
And so on. And so the same for,  same idea for this one.

19
01:53.750 --> 02:01.920
We start from 1 so we skip a but we get b, we skip c but we get d and so on. You get the idea.

20
02:02.830 --> 02:09.410
And then with these two variables we say for letter one and letter two,

21
02:09.410 --> 02:16.930
so in the first iteration letter one will be equal to a, and letter two will be equal to b.

22
02:16.940 --> 02:25.260
So what we do with a and b? Well, we concatenate those two letters, so letter plus, so letter one plus 

23
02:25.270 --> 02:26.160
letter two.

24
02:26.190 --> 02:31.040
So that would be something like a plus b.

25
02:31.400 --> 02:37.200
And then we also need this special character here which creates a break line.

26
02:40.690 --> 02:45.440
So you get a string like that. Of course the terminal doesn't show this as a brake line.

27
02:45.450 --> 02:48.170
This works in a text file.

28
02:48.370 --> 02:53.850
So the text file will read these a as a brake line and then it goes to the next iteration.

29
02:53.860 --> 02:54.940
And so on.

30
02:55.090 --> 02:56.300
This is the exercise.

31
02:56.340 --> 03:00.670
I hope this is clear, but ask a question if you like and I'll talk to you latter.